"""
Django settings for Multi_Vendor_Hospital_System project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-ubep+*=_05m^7@i@(u%bi5a)(b)amnhede=k5@yw*9_aw*)st="

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG")


ALLOWED_HOSTS = ["*"]


# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_simplejwt",
    "drf_yasg",
    "django_filters",
    "autoslug",
    "versatileimagefield",
    "simple_history",
    "phonenumber_field",
    "channels",
    "storages",  # AWS S3
    # "django_elasticsearch_dsl",
]
PROJECT_APPS = [
    "core",
    "Accounts",
    "Common",
    "Hospital",
    "Doctor",
    "Patient",
    # "search",
    "chat",
    # "temporary",
]
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
]


if DEBUG == "True":
    INSTALLED_APPS += ["silk", "debug_toolbar"]

    MIDDLEWARE += [
        "silk.middleware.SilkyMiddleware",
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ]


ROOT_URLCONF = "Multi_Vendor_Hospital_System.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Multi_Vendor_Hospital_System.wsgi.application"
ASGI_APPLICATION = "Multi_Vendor_Hospital_System.asgi.application"


# Database Docker + Local

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME"),
        "USER": os.environ.get("DB_USER"),
        "PASSWORD": os.environ.get("DB_PASS"),
        "HOST": os.environ.get("DB_HOST"),
        "PORT": os.environ.get("PORT"),
    }
}


# AWS
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "HOST": "database-1.ccugnkxcigcf.ap-southeast-1.rds.amazonaws.com",
#         "NAME": "multivendor",
#         "USER": "postgres",
#         "PASSWORD": "postgres",
#         "Port": "5432",
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"
# TIME_ZONE = "Dhaka"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


USE_AWS = os.getenv("USE_AWS") == "True"

if USE_AWS:
    if os.getenv("USE_S3") == "True":
        AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
        AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
        AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
        AWS_DEFAULT_ACL = "public-read"
        AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
        AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
        # s3 static settings
        AWS_LOCATION = "static"
        STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/"
        STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

        # Public media storage
        PUBLIC_MEDIA_LOCATION = "media"
        MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/"
        DEFAULT_FILE_STORAGE = (
            "Multi_Vendor_Hospital_System.storage_backends.PublicMediaStorage"
        )

        # # Private media storage
        # PRIVATE_MEDIA_LOCATION = "private"
        # PRIVATE_FILE_STORAGE = (
        #     "Multi_Vendor_Hospital_System.storage_backends.PrivateMediaStorage"
        # )
else:
    STATIC_URL = "static/"
    STATIC_ROOT = os.path.join(BASE_DIR, "static")
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
    MEDIA_URL = "/media/"

STATICFILES_DIRS = (os.path.join(BASE_DIR, "chat/static"),)


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

APPEND_SLASH = False

# for debug toolbar
INTERNAL_IPS = [
    "127.0.0.1",
]

AUTH_USER_MODEL = "Accounts.User"

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 25,
}

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = "parvezhossen81@gmail.com"  # Gmail
EMAIL_HOST_PASSWORD = "nniyielofjlcuvav"  # app passwords


VERSATILEIMAGEFIELD_SETTINGS = {
    "cache_length": 5 * 24 * 3600,  # 5 days
    "cache_name": "versatileimagefield_cache",
    "cache_timeout": 5 * 24 * 3600,
}

# Docker + Local Celery settings
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND")


# AWS
# CELERY_BROKER_URL = (
#     "redis://rediscluster.pe9cpy.ng.0001.apse1.cache.amazonaws.com:6379/0"
# )
# CELERY_RESULT_BACKEND = (
#     "redis://rediscluster.pe9cpy.ng.0001.apse1.cache.amazonaws.com:6379/0"
# )


CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ.get("CACHE_URL"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "versatileimagefield_cache": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ.get(
            "versatileimagefield_cache"
        ),  # Change this if your Redis server is on a different host/port
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
        "TIMEOUT": 5 * 24 * 3600,
    },
}


# # Docker Channel layers
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [("redis", 6379)],
#         },
#     },
# }


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=2),
    "ALGORITHM": "HS256",
    "AUTH_HEADER_TYPES": ("Bearer",),
}


# ELASTICSEARCH_DSL = {
#     "default": {
#         # "hosts": "https://localhost:9200",
#         "hosts": "http://127.0.0.1:9200",
#         "http_auth": ("elastic", "EMoIrqXrKsRxaybiEQm3"),
#         # "verify_certs": False,
#     }
# }
